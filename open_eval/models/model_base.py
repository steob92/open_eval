from abc import ABC, abstractmethod
import logging

class ModelBase(ABC):
    """
    Abstract base class for all models.
    """

    def __init__(self, name: str = "BaseModel"):
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        self.name : str = name
        self._think : bool = False

    @property
    def think(self) -> bool:
        return self._think
    
    @think.setter
    def think(self, think: bool) -> None:
        self._think = think

    @abstractmethod
    def generate(self, prompt: str) -> str:
        """
        Generates a response from the model given an input prompt.

        Args:
            prompt (str): The input prompt to send to the language model.

        Returns:
            str: The response generated by the language model.
        """

        pass


    @abstractmethod
    def a_generate(self, prompt: str) -> str:
        """
        Generates a response from the model given an input prompt asynchronously.

        Args:
            prompt (str): The input prompt to send to the language model.

        Returns:
            str: The response generated by the language model.
        """

        pass
